                                        AKKA with Scala
..............................................................................................

What is Akka?
   Akka is a toolkit for building highly concurrent,distributed and resilent message driven,reactive applications for jvm using scala and java programming language.

What is distributed application?

 Application is distributed across multiple nodes or machines which interact each other via networks.

Application is deployed on multiple machines/nodes in order to scale the applications and in order to make the application highly available, improve performance.

Application may require various external system communications such as database,third party apis,messaging servers etc.......

Distributed applications are mostly web driven accessiable via internets.

Distributed application characterestics:
........................................

Concurrency && Blocking ,NonBlocking,Async:
...........................................

Concurrency:
    Running more than one thing at the same point of time.
    Parrell programming is other wise called concurrency

How to implement concurrency?

=>Process level
    Running more than one process on operating system
 Process is a program which is running on RAM(Main Memory), Which can be accessed by.
 Every Process has its own unique memory address.
 Process can communicate each other in order to pass message and receive message -IPC

EG:
  Webservers and containers - java webservers- tomcat- tomcat is running on jvm.
  We can run multiple instances of tomcat(jvm) on single machine 

=>sub process -Threads
   Threads are lightweight process,because it does not occupy the memory,rather it shares the process memory itself
   Threads are running on the physical process.

  On Single process, if you want to run multiple programs in single application, each program can be executed on multiple threads -  multi threading.
..............................................................................................
				Mutli Threading and Web Servers
..............................................................................................

Request per Thread Model;

 in webservers every request is mapped with a single thread,dedicated single thread.

 if webserver recieves 100 request , then it creates 100 threads

  1000 X 1000
  1Millon X 1 Millon Threads

if all threads waiting for data, that means that thread is blocked/freezed/parked for data.

What if more threads are blocked on single process?

=>Memory wastage
   create thread requires some memory, a thread can eat up to 1MB of memory.
   more threads , more memory.

=>CPU is also spending lot of time on Context Switch.
  Linux like operating systems , in order improve the performance of threads
  
............................................................................................
				    IO
..............................................................................................
	
File Descriptor:

-It is data structure(array) which is available in the kernal- having key -value pairs 
 It stores the information about io devices.

-It is created for every process - Per Process 

File Descriptor maps io devices with The application Progams

lets say i have java program runs on jvm.

When ever jvm starts , file descriptor is created and kept for io interaction.


File Descriptor contains two fields
 ------------------------------------
 File Descriptor Entries           File Pointer Reference
     0                                 STDIN    -KEYBOARD Binding
     1                                 STDOUT   -Monitor Binding
     2                                 STDERROR -Monitor Binding
     3                                  ?
     4                                  ?

The first three enteries are created when process bootstraps.

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyBytes {
    public static void main(String[] args) throws IOException {

        FileInputStream in = null;
        FileOutputStream out = null;

        try {
            in = new FileInputStream("xanadu.txt");
            out = new FileOutputStream("outagain.txt");
            int c;

            while ((c = in.read()) != -1) {
                out.write(c);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
}

In this program, when application calls "in.read()"
    ----------------->JVM invokes system call(api written in c language)------|os keneral
                      -->It will add an entry into file descriptor table and binds the disk file location

  
File Descriptor contains two fields
 ------------------------------------
 File Descriptor Entries           File Pointer Reference
     0                                 STDIN    -KEYBOARD Binding
     1                                 STDOUT   -Monitor Binding
     2                                 STDERROR -Monitor Binding
     3                                 HD------------->bINDING HARDDRIVE
     4                                 NETWORK -----|NEC BINDING
...............................................................................................
.............................................................................................
				Multi threading and IO Models
............................................................................................

Every modern process(JVM) is multi threaded.
Each thread can be created and assigned for an io operations : concurrent io /parrell io.
Every thread is blocked/freezed until data is ready from io channels.

Based this idea only web servers were designed : Multi threading and io.

In web , there is programming model request(read)-response(write)(Network IO) model

Client--------------------IO Channel------------------------Server

Server Design:
..............

Every Web server is multi threaded -tomcat.

When ever a new request(io request) is arrived, Tomcat(Server) creates/assigns "a thread"
............................................................................................
............................................................................................
C10K Problem:
.............
The C10k problem is the problem of optimizing network sockets to handle a large number of clients at the same time.

 1000 REQ = 1000 Threads - This is Problem

 More Req ==Minimum number of Threads

Why? What is problem of Threading:

if i create thread
 -memory allocation 
 -managing life cycle of threads

if thread is created , requests kernal for data, if the data not ready.

if data is not ready during that time thread is waiting(blocking)/blocked 
lets say , thread has created it is waiting for 1ms for data. this 1ms during that thread is useless, can't be used by any one.

The cpu, will pause the unused thread for 1ms, if data is ready again it will activate-This process is called context switch.

.............................................................................................
				How to build efficient network io apps
.............................................................................................

Before 2000, all programming languages used blocking io apis by default,even today all programming langugages blocking io apis.

C10K problem and its solution:

Every os has blocking api only.

After 2000, First,Linux introduced a new api called non blocking io api - "select"

1st Implementation:

 select  + read 

select will add entry , returns control back to process
read will be fired to read data once it is ready in the keneral
............................................................................................
............................................................................................

2nd Implementation:

Poll:
.....

Poll is similar to Select -nonblocking,but data is reterived not by calling extra method(read).
Polling is nothing pushing- Data is pushed from the kernal to Application process

select is Pull based - Data is pulled from the kernal.

Even driven Programming , Event driven io. when ever data is ready, poll will start sending signal(event) to application Process, where application process listens for events, once event is given which starts processing that event.

...........................................................................................
...........................................................................................

3rd Implmentation:

epoll:

->epoll is a framework extended from poll.
->monitoring multiple file descriptors to see if I/O is possible on any of   them. 


Epoll loop:
           for (;;) {
               nfds = epoll_wait(epollfd, events, MAX_EVENTS, -1);
               if (nfds == -1) {
                   perror("epoll_wait");
                   exit(EXIT_FAILURE);
               }

               for (n = 0; n < nfds; ++n) {
                   if (events[n].data.fd == listen_sock) {
                       conn_sock = accept(listen_sock,
                                          (struct sockaddr *) &addr, &addrlen);
                       if (conn_sock == -1) {
                           perror("accept");
                           exit(EXIT_FAILURE);
                       }
                       setnonblocking(conn_sock);
                       ev.events = EPOLLIN | EPOLLET;
                       ev.data.fd = conn_sock;
                       if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,
                                   &ev) == -1) {
                           perror("epoll_ctl: conn_sock");
                           exit(EXIT_FAILURE);
                       }
                   } else {
                       do_use_fd(events[n].data.fd);
                   }
               }


Epoll runs a loop indefintly for io operations(network io), when ever data is ready which emits event to the process.

When operating systems supports non blocking infrastructure, language and runtimes should support that
The first non blocking implemention was nginx web server - the first c10k solution

flollwed by nginx "2008" -  Node.js- Non blocking soultion.
.............................................................................................
			Java Implementations on Nonblocking and event Driven IO
............................................................................................

1.NIO
2.Apache Netty
3.LightBend - Akka
............................................................................................

           AKKA is fully event driven Programming model,based on Actor Model
.............................................................................................

Before understanding actor model, we need to understand object interaction models/programm interaction models.

Every distributed system built using "Objects".

Object talks each other in order to pass and receive messages(data).

Object interaction patterns:
............................

1.within one single runtime - JVM
   Objects can be interacted via method calls

class Order {
 
   Payment payment;

   pay(){
       
       Object paymentStatus = payment.processPayment(order)
   }

} 
class Payment {
   processPayment(order){
     return paymentStatus;
   }
}   
Object interaction
Payment payment = new Payment()
Order order = new Order(payment)
order.pay(orderinfo);


2.Across the multiple runtime
   may be in one machine - multi process
   may be in across machines

RPI: Remote Procedure Invocation
 =>Networks
    =>Protocals -  TCP/UDP/HTTP/HTTPS/PROPERTIY
    =>LOCATION Identification - DNS
    =>Fault Management
    =>Data Transfer and its format

Concurrency and Object Interactions:
....................................
Systems like java is multi threaded.
Order system may run in a thread

Blocking and Non Blocking : Synchrous and Asynchrous:
......................................................

If object is invoking method on thread on another object, thread is blocked until another object returns data : Blocking -Here cpu resources and memory resources are heavily used and wasted.

if object is invoking method on  thread on anonther object, thread is not blocked,rather which uses "event driven programming" - Non Blocking Arch.


Non Blocking Arch:

1.using events at language level/Framework/lib -  nodejs,akka,vertx....

2.using MOM(Message Orinted Middlewares) - RabbitMQ,kafka...

..............................................................................................

What is Actor Model and Actors?
The actor model in computer science is a mathematical model of concurrent computation that treats actor as the universal primitive of concurrent computation. In response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received. Actors may modify their own private state, but can only affect each other indirectly through messaging (removing the need for lock-based synchronization)
In Actor Model every object(java /Scala) is Actor.

In java we can call objects in different Names

class Employee {}

POJO -  Plain Old Java Object

@Entity
class Employee {}

Employee -  Entity - Entity itself is object but has some extra power.
            Power: entities are persistable inside database.

class HomeController extends javax.Servlet.HttpServlet {

}
HomeController - Servlet - Servlet itself is object but it has some extra Power
                 Power: can talk to HTTP protocal.

@Repository
@Service
@RestController
etc....

class OrderActor  extends Actor {

}
Here OrderActor itself is Object but it has some extra power.

Actor Powers:
.............

=>Actor can create other Actors
=>Actor can send message to other actors (Actors never call methods on Another Methods)
=>Actor can make local decisions
=>Actor can Process Messages 
=>Actor can store multiple messages using a datastructure(Queue)-MailBox
=>Actor may modify their own private state

.............................................................................................
How we can implement actor model?
 Akka is reference implementation from Lightbend is the company behind Akka, a distributed application architecture that enables developers to easily build real-time, data-centric applications.

Akka provides collection of libs(jars) to implement end to end actor model for building realtime distributed data driven applications.

1.Actor library
2.Remoting
3.Cluster
4.Cluster Sharding
5.Cluster Singleton
6.Persistence
7.Projections
8.Distributed Data
9.Streams
10.Alpakka
11.HTTP
12.gRPC
Other Akka modules
..............................................................................................
	                            Learning Path of akka Toolkit
..............................................................................................

1.Actors model implemenation
2.Akka Streams - Reactive Programming
3.Clustering - What if akka is running on multiple nodes


1.Actors model implemenation;

->How to create actor(object)
->How to send message to an Actor.
->One actor is not an actor rather we create multiple actors.


Akka Project Setup:
Follw this link:

https://developer.lightbend.com/guides/akka-quickstart-scala/?_ga=2.180303392.521072433.1643425309-665213842.1639582760
.............................................................................................
				   Akka and JVM
.............................................................................................


Akka Provides runtime, on which akka actors are deployed.

				
				
					Actors
					  |
				  Akka Engine/Runtime
					 |
					JVM
..............................................................................................

Objects In Akka:

ActorSystem :
 =>Engine which starts actor application.

In Actor model everthing is Actor(object).
ActorSystem itself is actor -  Root Actor


package com.incdoinc.actor

import akka.actor.ActorSystem


object ActorSystemMain extends App {
  println("Actor System begins")
  //start Akka Engine
  val system= ActorSystem("GreeterSystem")
  println(system.name)
  println(Thread.currentThread().getName)
}

Actor System forms Hierachy:
...........................

Like Html Represents the document(elements) in a hierachical structure.(tree structure)
 ->DOM Tree

In Actor model, actors are represented as tree of actors.

The Root /superium /Guardian actor will initize the tree

Guuardian Actor - ActorSystem.

Root Actor can have common configuration which can be shared across child actors.

Common Configuration:
-dispatchers
->deployments
->remote capablites
->adddress

How to create actors and send message , repond to the message?


We have two programming styles

=> Object oriented styles, using classes and methods
=> functional styles using dsl functions

package com.incdoinc.actor

import akka.actor.{Actor, ActorSystem, Props}

class HelloWorldActor extends Actor {
  //this is listener method which gets called when ever message is received
  override def receive: Receive = {
    case msg: String => println(s"$msg  ${Thread.currentThread.getName}")
    case _ => println("Unknown message") // Default ca
  }
}


object ActorSystemMain extends App {
  println("Actor System begins")
  //start Akka Engine
  val system = ActorSystem("GreeterSystem")
  //Create new Actor
  var actor= system.actorOf(Props[HelloWorldActor],"HelloWorldAkka")
  //send message
  actor ! "Hello Akka"
}
..............................................................................................

How to Create Actor?

YOu have declare class  that extends Actor Trait

Package : akka.actor.Actor
   Actor base trait that should be extended by or mixed to create an Actor with the semantics of ActorModel

An actor has a well-defined (non-cyclic) life-cycle.

RUNNING (created and started actor) - can receive messages
SHUTDOWN (when 'stop' is invoked) - can't do anything

class HelloWorldActor extends Actor {


}
You have to override receive -Method
  override def receive: Receive = {
    case msg: String => println(s"$msg  ${Thread.currentThread.getName}")
    case _ => println("Unknown message") // Default ca
  }

The receive method does pattern matching on the received message and decide what to do
.............................................................................................

How to create Actor instance?

ActorSystem:
  => The ActorSystem is root actor in actors structure.
  => The ActorSystem is a hierarchical group of actors which share common behaviours
  => It is also entry and exit point of Akka System.

val system = ActorSystem("NameOfApplication")

ActorSystem has lot of Properties

Actor Systems form hierachy of nodes(actors), later who communicates via messages.

ActorSystem forms communication pipe lines through which messages are transmitted.

ActorSystem 
   internally uses "TCP" Protocal to send and receive message.
   At application level uses "akka" Protocal to send and receive message.

Every Protocal has syntax:

 http://localhost:8080/api/resource
  |       |         |   |
scheme  host     port Resource(uri)

akka://GreeterSystem /user/GreeterSystem
 |         |          |
Scheme  Application   URI

Actor Paths:

"/user" is the guardian actor for all user-created top-level actors; actors created using ActorSystem.actorOf are found below this one.

"/system" is the guardian actor for all system-created top-level actors, e.g. logging listeners or actors automatically deployed by configuration at the start of the actor system.


"/deadLetters" is the dead letter actor, which is where all messages sent to stopped or non-existing actors are re-routed (on a best-effort basis: messages may be lost even within the local JVM).


"/temp" is the guardian for all short-lived system-created actors, e.g. those which are used in the implementation of ActorRef.ask.


"/remote" is an artificial path below which all actors reside whose supervisors are remote actor references


package com.incdoinc.actor

import akka.actor.{Actor, ActorSystem, Props}

class HelloWorldActor extends Actor {
  //this is listener method which gets called when ever message is received
  override def receive: Receive = {
    case msg: String => println(s"$msg  ${Thread.currentThread.getName}")
    case _ => println("Unknown message") // Default ca
  }
}


object ActorSystemMain extends App {
  println("Actor System begins")
  //start Akka Engine
  val system = ActorSystem("GreeterSystem")
  //properties : Hierachy information
  println(s" Actor Path info :  ${system./("Hello")}")
  println(s" Actor Root :  ${system./("Hello").root}")
  println(s" Actor Address :  ${system./("Hello").address} ")

}

How to Create Child Actors?
 
=> An an Actor create an another actor.

val helloActor=system.actorOf(Props[HelloWorldActor], "HelloWorldActor")

Props:
  Props is Configuration Object.
  Used to pass options-meta information when we deploy actor on Actor System.
  You can create Props from akk.actor.props package
  YOu can create actor by passing a props instance into the actorOf factor method which is   available in the ActorSystem  and ActorContext
  

ActorRef:
   An actor reference is a subtype of ActorRef, whose foremost purpose is to support sending messages to the actor it represents.

How to send messages?

1.via Tell method on ActorRef Instance.
helloActorRef.tell("Hello", helloActorRef)
2.via bang operator
helloActorRef ! "Hello Bang"
.............................................................................................
			How to create Child Actors
.............................................................................................

ActorContext:
  It is similar to ActorSystem Object.
  ActorContext object is used to get Current ActorEngine Information
  Can Create Other Actors
  Can send Message...

inside receive method of actor "context" variable is available to refer ActorContext Object.
inside receive method of actor "self" variable is avaiable to refer "The current ActorRef Object".

package com.incdoinc.actor.childactors

import akka.actor._;

class RootActor extends Actor {
  def receive = {
    case msg: String =>
      //Get information about this actor itself- self
      println("Current Actor Information", self.path.name)
      //Get information about Parent actor
      println("Parent Actor information ", context.parent.path.name)
      //using context create new Child Actors
      val childActorRef = context.actorOf(Props[ChildActor], "Child")
      //send message to child Actor
      childActorRef ! s" ${msg} , Hello Child"
  }
}

class ChildActor extends Actor {
  override def receive: Receive = {
    case msg: String => println(s"$msg") // Default ca
  }
}


object ChildActors {
  def main(args: Array[String]): Unit = {

    val system = ActorSystem("GreetingSystem")
    //create RootActor
    val rootActorRef = system.actorOf(Props[RootActor], "RootActor")
    rootActorRef ! "Hello Root!";

  }
}
.............................................................................................
				 Actor Life Cycle Methods
.............................................................................................
Akka provides life cycle methods for an actor.

Life Cycle methods:

1.preStart
   It is called once the actor starts its life cyle. initalization of some resources.
2.postStop
3.preRestart
4.postRestart


package com.incdoinc.actor

import akka.actor.{Actor, ActorSystem, Props}

class GreetingActor extends Actor {
  def receive = {
    case greet: String => println(s"$greet")
  }

  override def preStart(): Unit = {
    println("preStart")
  }

  override def postStop(): Unit = {
    println("postStop")
  }

}

object ActorLife extends App {
  val system = ActorSystem();
  val actor = system.actorOf(Props[GreetingActor], "GreetingActor");
  actor ! "Hello"
  //un deploying the actor from the actorEngine
  system.stop(actor);
 // actor ! "Hello"

}
..............................................................................................
			Actor Communication Patterns /Interaction Patterns
.............................................................................................

Actors are communicating through actors with "ActorRef" Object.

ActorRef[T] -ActorRef[Order] - ActorRef[Inventory]
  
  T - The type of Messages the actor accepts which other wise called as "Protocal".

Here Protocal means "The Rules for sending data" - We have to send typed messages.

Fire and Forget:
...............

The fundamental way to communicate with actors via "tell or bang opertore"
actorRef ! messagetobeSent.

Sending message with tell/bang operator from the any thread.
Messages can be received from the any thread.

"Tell" is async which means that method returns right away.

As soon as the tell is called control is returned from the callee side, there is no gurantee that the message has been proceed by the callee or not.

When to use fire and forget Model?

=>You are not sure that the message was proceessed or not.
=>if dont want to track non successful deliver or processing.

Drawback of this model:

=> if the message gets lost, the sender will not know what happended.
............................................................................................
Request-Response Model
................

1.Many interactions between actors one or more message being send back from the recieving actor.
2.A response message can be result of a query,some kind of ack was received and processed.


syntax:
 case class Request(query:String,replyTo:ActorRef[Response])

 case class Response(result:String)

The caller(sender) has the reference of ActorRef[Response]

Request - Response with Tell method (!) Bang operator.

package com.incdoinc.actor.interaction.patterns


import akka.actor.{Actor, ActorSystem, Props}

class SenderActor extends Actor {
  override def receive = {
    case msg: String => println(s"Message Received From => ${sender.path.name} Message => ${msg}")
      //create child actor
      val child = context.actorOf(Props[ReceiverActor])
      child ! "Hello Child"
  }
}

class ReceiverActor extends Actor {
  override def receive = {
    case msg: String => println(s"Message Received From  => ${sender.path.name} Message ${msg}")
      //reply message
      println("Replying to " + sender().path.name)
      sender() ! "Hey I got Your message";
  }
}

object RequestReponseModel extends App {
  println("Actor Request and Response Model")
  val system = ActorSystem("ActorSystem")
  val actor = system.actorOf(Props[SenderActor], "RootActor");
  actor ! "Hello Root"

}
..............................................................................................
				Ask Pattern
..............................................................................................

Ask is  pattern , using this , Actors uses asnc model to get data.

Ask is used to send message asynchronously and it returns a "Future" which is object , encapsulating result. if actor does not reply on time, we can even set timeouts as well.

In the ask pattern we can implement resilence behaviour, so that we dont need to wait or hangover long time  if the response not come.

TimeoutException is thrown if Service is not returning the data on time.

ask pattern can be implemented using

? or ask to send message

package com.incdoinc.actor.interaction.patterns


import akka.actor.{Actor, ActorSystem, Props}
import akka.pattern.ask
import akka.util.Timeout

import scala.concurrent.Await
import scala.concurrent.duration._
import scala.language.postfixOps

class GreeterActor extends Actor {
  override def receive = {
    case msg: String => println(s"Got ${msg}")
  }
}


object AskPattern extends App {
  var system = ActorSystem("ActorSystem");
  val actor = system.actorOf(Props[GreeterActor], "GreeterActor")
  implicit val timeout = Timeout(2 seconds)
  val future = actor ? "Hello"
  //read value from the future
  val value = Await.result(future, timeout.duration)
  println(value)

}
output:
[2022-02-26 12:29:29,611] [INFO] [akka.event.slf4j.Slf4jLogger] [ActorSystem-akka.actor.default-dispatcher-4] [] - Slf4jLogger started
Got Hello
Exception in thread "main" java.util.concurrent.TimeoutException: Future timed out after [2 seconds]
...........................................................................................
				Ask with Reply Pattern
............................................................................................

package com.incdoinc.actor.interaction.patterns

import akka.actor.{Actor, ActorSystem, Props}
import akka.pattern.ask
import akka.util.Timeout

import scala.concurrent.Await
import scala.concurrent.duration._
import scala.language.postfixOps


class AskReplyActor extends Actor {
  def receive = {
    case msg: String => println(s"Message Received : ${msg} from the outside actor instance");
      println("Reply...")
      val senderName = sender();
      senderName ! "Hello,I got Message" // reply message
  }
}

object AskPatternWithReply extends App {
  val system = ActorSystem("ActorSystem");
  val actor = system.actorOf(Props[AskReplyActor],"RootActor");
  implicit val timeout = Timeout(2 seconds)
  val future = actor ? "Hello"
  //read value from the future
  val value = Await.result(future, timeout.duration)
  println("From the Main " + value)
}
.............................................................................................
				Ask with Reply Pattern with Timeout
..............................................................................................

If Actor A asks message from the Actor B, what if the Actor A waits long than excepted duration, then TimeoutException to be thrown.

If Actor B takes more time than expected duration.

package com.incdoinc.actor.interaction.patterns

import akka.actor.{Actor, ActorSystem, Props}
import akka.pattern.ask
import akka.util.Timeout

import scala.concurrent.Await
import scala.concurrent.duration._
import scala.language.postfixOps

class GreeterAskTimeout extends Actor {
  def receive = {
    case msg: String => println(s"Message Received ${msg} from the outside actor instance")
      //Block this thread for some time
      Thread.sleep(5000)
      println("Reply...")
      val senderName = sender();
      senderName ! "Hello,I got Message" // reply message
  }
}

object AskReplyWithoutTimeout extends App {
  val system = ActorSystem("ActorSystem");
  val actor = system.actorOf(Props[GreeterAskTimeout],"RootActor");
  implicit val timeout = Timeout(2 seconds)
  val future = actor ? "Hello"
  //read value from the future
  val value = Await.result(future, timeout.duration)
  println("From the Main " + value)
}
..............................................................................................
				Actors Programming model
..............................................................................................

1.classic Actors
2.Modern Actors aka dsl actors


What is classic Actors?
  
classic Actors are  old way of writing code using object oriented styles. using classes.

Suppose if the project already running in old akka systems, no problems because akka supports both env.

class Actors implementation example.

Steps 
1.declare a class 


class MyActor extends Actor {
  
}


2.override receive method 


class MyActor extends Actor {
   def receive = {
      case msg:String => your code
      case _ => unknown message
   }  
}
.............................................................................................
			 Sending Objects to Actors
.............................................................................................

package com.example.classicactors

import akka.actor.{Actor, ActorRef, ActorSystem, PoisonPill, Props}

import scala.concurrent.duration.DurationInt
import scala.language.postfixOps

//Object types
case object Ping;
case object Pong;

class Pinger extends Actor {
  var counter = 100

  def receive = {
    case Pong =>
      println(s"${self.path} recived Pong, Counter Value $counter")
      if (counter > 0) {
        counter -= 1
        sender() ! Ping
      } else {
        sender() ! PoisonPill
        self ! PoisonPill
      }

    case _ => println("Unknown Message")
  }
}

class Ponger(pinger: ActorRef) extends Actor {
  def receive = {
    case Ping =>
      println(s"${self.path} received ping")
      pinger ! Pong
  }
}


object ClassicActors extends App {
  val system = ActorSystem("PingPongSystem")
  val pinger = system.actorOf(Props[Pinger], "pinger")
  val ponger = system.actorOf(Props(classOf[Ponger], pinger), "ponger")

  //you have to pause main thread  for some time

  import system.dispatcher

  system.scheduler.scheduleOnce(500 millis) {
    println("delay")
    ponger ! Ping
  }


}




















































































































































































